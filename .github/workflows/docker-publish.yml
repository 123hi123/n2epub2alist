name: 建立並發布Docker映像

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v3

      - name: 設置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登入GitHub容器註冊中心
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元數據 (標籤、標籤)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 建立並推送Docker映像
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 在PR評論中顯示映像資訊
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `### Docker映像摘要
            - 映像ID: \`${{ steps.build-and-push.outputs.digest }}\`
            - 標籤: \`${{ steps.meta.outputs.tags }}\`
            
            若PR合併到主分支，這個映像會被推送到 Container Registry。
            可以使用以下命令拉取此映像:
            \`\`\`
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }) 